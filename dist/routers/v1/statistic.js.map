{"version":3,"sources":["../../../build/routers/v1/statistic.js"],"names":["Object","defineProperty","exports","value","express","require","base_1","middlewares_1","AuthRouter","router","Router","authInfoMiddleware","run","adminTypeMiddleware","queryMiddleware","BaseRouter","default"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACAA,OAAOC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C,EAAEC,OAAO,IAAT,EAA7C;AACA,IAAMC,iCAAUC,QAAQ,SAAR,CAAV,CAAN;AACA,IAAMC,gCAASD,QAAQ,SAAR,CAAT,CAAN;AACA,IAAME,uCAAgBF,QAAQ,mBAAR,CAAhB,CAAN;;IACMG,U;;;AACF,0BAAc;AAAA;AAAA;AAAA;;AAAA;;AAAA;;AAEV,cAAKC,MAAL,GAAcL,QAAQM,MAAR,EAAd;AACA;AACA;AACA;AACA;AANU;AAOb;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;+CACuB;AAAA;AAAA;;AACnB,mBAAO,CAACH,cAAcI,kBAAd,CAAiCC,GAAjC,EAAD,EAAyCL,cAAcM,mBAAd,CAAkCD,GAAlC,EAAzC,EAAkFL,cAAcO,eAAd,CAA8BF,GAA9B,EAAlF,CAAP;AACH;;;GA/FoBN,OAAOS,U;;;;AAiGhCb,QAAQc,OAAR,GAAkBR,UAAlB;AACA","file":"statistic.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst express = require(\"express\");\nconst base_1 = require(\"../base\");\nconst middlewares_1 = require(\"@/middlewares\");\nclass AuthRouter extends base_1.BaseRouter {\n    constructor() {\n        super();\n        this.router = express.Router();\n        // this.router.post('/dashboard', this.statisticMiddlewares(), this.route(this.statisticDashboard));\n        // this.router.post('/statistic_pack', this.statisticMiddlewares(), this.route(this.statisticPack));\n        // this.router.post('/statistic_video', this.statisticMiddlewares(), this.route(this.statisticVideo));\n        // this.router.post('/summary', this.statisticMiddlewares(), this.route(this.statisticSummary));\n    }\n    // async statisticSummary(req: Request, res: Response) {\n    //     const result = await userController.statisticSummary(req.body, req.queryInfo);\n    //     this.onSuccess(res, result);\n    // }\n    // async statisticVideo(req: Request, res: Response) {\n    //     await this.validateJSON(req.body, {\n    //         type: 'object',\n    //         properties: {\n    //             type: {\n    //                 enum: [\n    //                     'SELECT',\n    //                     'DAY'\n    //                 ]\n    //             },\n    //             select: {\n    //                 enum: [\n    //                     'TODAY',\n    //                     'LAST_7_DAY',\n    //                     'LAST_30_DAY'\n    //                 ]\n    //             },\n    //             from_date: {\n    //                 type: 'string'\n    //             },\n    //             to_date: {\n    //                 type: 'string'\n    //             }\n    //         },\n    //         required: ['type']\n    //     })\n    //     const result = await videoController.statisticVideo(req.body, req.queryInfo);\n    //     this.onSuccessAsList(res, result, undefined, req.queryInfo)\n    // }\n    // async statisticPack(req: Request, res: Response) {\n    //     await this.validateJSON(req.body, {\n    //         type: 'object',\n    //         properties: {\n    //             type: {\n    //                 enum: [\n    //                     'SELECT',\n    //                     'DAY'\n    //                 ]\n    //             },\n    //             select: {\n    //                 enum: [\n    //                     'TODAY',\n    //                     'LAST_7_DAY',\n    //                     'LAST_30_DAY'\n    //                 ]\n    //             },\n    //             from_date: {\n    //                 type: 'string'\n    //             },\n    //             to_date: {\n    //                 type: 'string'\n    //             }\n    //         },\n    //         required: ['type']\n    //     })\n    //     const result = await packController.statisticPack(req.body, req.queryInfo);\n    //     this.onSuccessAsList(res, result, undefined, req.queryInfo)\n    // }\n    // async statisticDashboard(req: Request, res: Response) {\n    //     await this.validateJSON(req.body, {\n    //         type: 'object',\n    //         properties: {\n    //             type: {\n    //                 enum: [\n    //                     'YEAR',\n    //                     'MONTH'\n    //                 ]\n    //             },\n    //             month: {\n    //                 type: 'string'\n    //             },\n    //             year: {\n    //                 type: 'string'\n    //             }\n    //         },\n    //         required: ['type']\n    //     })\n    //     const result = await packController.statisticDashboard(req.body, req.queryInfo);\n    //     this.onSuccess(res, result);\n    // }\n    statisticMiddlewares() {\n        return [middlewares_1.authInfoMiddleware.run(), middlewares_1.adminTypeMiddleware.run(), middlewares_1.queryMiddleware.run()];\n    }\n}\nexports.default = AuthRouter;\n//# sourceMappingURL=statistic.js.map"]}